{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/fernando/trybe/Git Fernando/chefsmenu/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/fernando/trybe/Git Fernando/chefsmenu/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy;\nfunction makeError() {\n  return new DOMException('The request is not allowed', 'NotAllowedError');\n}\nfunction copyClipboardApi(_x) {\n  return _copyClipboardApi.apply(this, arguments);\n}\nfunction _copyClipboardApi() {\n  _copyClipboardApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (navigator.clipboard) {\n            _context.next = 2;\n            break;\n          }\n          throw makeError();\n        case 2:\n          return _context.abrupt(\"return\", navigator.clipboard.writeText(text));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _copyClipboardApi.apply(this, arguments);\n}\nfunction copyExecCommand(_x2) {\n  return _copyExecCommand.apply(this, arguments);\n}\nfunction _copyExecCommand() {\n  _copyExecCommand = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(text) {\n    var span, selection, range, success;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          // Put the text to copy into a <span>\n          span = document.createElement('span');\n          span.textContent = text;\n\n          // Preserve consecutive spaces and newlines\n          span.style.whiteSpace = 'pre';\n          span.style.webkitUserSelect = 'auto';\n          span.style.userSelect = 'all';\n\n          // Add the <span> to the page\n          document.body.appendChild(span);\n\n          // Make a selection object representing the range of text selected by the user\n          selection = window.getSelection();\n          range = window.document.createRange();\n          selection.removeAllRanges();\n          range.selectNode(span);\n          selection.addRange(range);\n\n          // Copy text to the clipboard\n          success = false;\n          try {\n            success = window.document.execCommand('copy');\n          } finally {\n            // Cleanup\n            selection.removeAllRanges();\n            window.document.body.removeChild(span);\n          }\n          if (success) {\n            _context2.next = 15;\n            break;\n          }\n          throw makeError();\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _copyExecCommand.apply(this, arguments);\n}\nfunction clipboardCopy(_x3) {\n  return _clipboardCopy.apply(this, arguments);\n}\nfunction _clipboardCopy() {\n  _clipboardCopy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(text) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return copyClipboardApi(text);\n        case 3:\n          _context3.next = 15;\n          break;\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.prev = 7;\n          _context3.next = 10;\n          return copyExecCommand(text);\n        case 10:\n          _context3.next = 15;\n          break;\n        case 12:\n          _context3.prev = 12;\n          _context3.t1 = _context3[\"catch\"](7);\n          throw _context3.t1 || _context3.t0 || makeError();\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 5], [7, 12]]);\n  }));\n  return _clipboardCopy.apply(this, arguments);\n}","map":{"version":3,"names":["module","exports","clipboardCopy","makeError","DOMException","copyClipboardApi","text","navigator","clipboard","writeText","copyExecCommand","span","document","createElement","textContent","style","whiteSpace","webkitUserSelect","userSelect","body","appendChild","selection","window","getSelection","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","removeChild"],"sources":["/home/fernando/trybe/Git Fernando/chefsmenu/node_modules/clipboard-copy/index.js"],"sourcesContent":["/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy\n\nfunction makeError () {\n  return new DOMException('The request is not allowed', 'NotAllowedError')\n}\n\nasync function copyClipboardApi (text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (!navigator.clipboard) {\n    throw makeError()\n  }\n  return navigator.clipboard.writeText(text)\n}\n\nasync function copyExecCommand (text) {\n  // Put the text to copy into a <span>\n  const span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  span.style.webkitUserSelect = 'auto'\n  span.style.userSelect = 'all'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  const selection = window.getSelection()\n  const range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  let success = false\n  try {\n    success = window.document.execCommand('copy')\n  } finally {\n    // Cleanup\n    selection.removeAllRanges()\n    window.document.body.removeChild(span)\n  }\n\n  if (!success) throw makeError()\n}\n\nasync function clipboardCopy (text) {\n  try {\n    await copyClipboardApi(text)\n  } catch (err) {\n    // ...Otherwise, use document.execCommand() fallback\n    try {\n      await copyExecCommand(text)\n    } catch (err2) {\n      throw (err2 || err || makeError())\n    }\n  }\n}\n"],"mappings":";;AAAA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,aAAa;AAE9B,SAASC,SAAS,GAAI;EACpB,OAAO,IAAIC,YAAY,CAAC,4BAA4B,EAAE,iBAAiB,CAAC;AAC1E;AAAC,SAEcC,gBAAgB;EAAA;AAAA;AAAA;EAAA,+EAA/B,iBAAiCC,IAAI;IAAA;MAAA;QAAA;UAAA,IAG9BC,SAAS,CAACC,SAAS;YAAA;YAAA;UAAA;UAAA,MAChBL,SAAS,EAAE;QAAA;UAAA,iCAEZI,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC3C;EAAA;AAAA;AAAA,SAEcI,eAAe;EAAA;AAAA;AAAA;EAAA,8EAA9B,kBAAgCJ,IAAI;IAAA;IAAA;MAAA;QAAA;UAClC;UACMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;UAC3CF,IAAI,CAACG,WAAW,GAAGR,IAAI;;UAEvB;UACAK,IAAI,CAACI,KAAK,CAACC,UAAU,GAAG,KAAK;UAC7BL,IAAI,CAACI,KAAK,CAACE,gBAAgB,GAAG,MAAM;UACpCN,IAAI,CAACI,KAAK,CAACG,UAAU,GAAG,KAAK;;UAE7B;UACAN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;;UAE/B;UACMU,SAAS,GAAGC,MAAM,CAACC,YAAY,EAAE;UACjCC,KAAK,GAAGF,MAAM,CAACV,QAAQ,CAACa,WAAW,EAAE;UAC3CJ,SAAS,CAACK,eAAe,EAAE;UAC3BF,KAAK,CAACG,UAAU,CAAChB,IAAI,CAAC;UACtBU,SAAS,CAACO,QAAQ,CAACJ,KAAK,CAAC;;UAEzB;UACIK,OAAO,GAAG,KAAK;UACnB,IAAI;YACFA,OAAO,GAAGP,MAAM,CAACV,QAAQ,CAACkB,WAAW,CAAC,MAAM,CAAC;UAC/C,CAAC,SAAS;YACR;YACAT,SAAS,CAACK,eAAe,EAAE;YAC3BJ,MAAM,CAACV,QAAQ,CAACO,IAAI,CAACY,WAAW,CAACpB,IAAI,CAAC;UACxC;UAAC,IAEIkB,OAAO;YAAA;YAAA;UAAA;UAAA,MAAQ1B,SAAS,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAChC;EAAA;AAAA;AAAA,SAEcD,aAAa;EAAA;AAAA;AAAA;EAAA,4EAA5B,kBAA8BI,IAAI;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,OAExBD,gBAAgB,CAACC,IAAI,CAAC;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;UAAA;UAAA,OAIpBI,eAAe,CAACJ,IAAI,CAAC;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA,MAEpB,4BAAW,IAAIH,SAAS,EAAE;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAGtC;EAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}